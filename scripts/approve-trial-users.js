/**
 * Script para aprovar usu√°rios em trial que ainda est√£o com status 'pending'
 * Este script atualiza usu√°rios que foram criados durante o per√≠odo de teste
 */

require('dotenv').config();
const mongoose = require('mongoose');
const User = require('../models/User');

async function approvePendingTrialUsers() {
  try {
    console.log('üîÑ Conectando ao MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB\n');

    // Buscar usu√°rios pending que t√™m trial ativo
    const pendingUsers = await User.find({
      status: 'pending',
      isInTrial: true
    });

    console.log(`üìä Encontrados ${pendingUsers.length} usu√°rios em trial com status 'pending'\n`);

    if (pendingUsers.length === 0) {
      console.log('‚úÖ Nenhum usu√°rio precisa ser atualizado!');
      process.exit(0);
    }

    // Atualizar cada usu√°rio
    for (const user of pendingUsers) {
      const now = new Date();
      const trialEnd = new Date(user.trialEndsAt);
      
      // Verificar se trial ainda √© v√°lido
      if (now > trialEnd) {
        console.log(`‚è∞ ${user.email} - Trial expirado, mantendo como 'pending'`);
        continue;
      }

      // Aprovar usu√°rio
      user.status = 'approved';
      await user.save();
      
      const daysRemaining = Math.ceil((trialEnd - now) / (1000 * 60 * 60 * 24));
      console.log(`‚úÖ ${user.email} - Aprovado (${daysRemaining} dias de trial restantes)`);
    }

    console.log('\nüéâ Atualiza√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar usu√°rios:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã Desconectado do MongoDB');
    process.exit(0);
  }
}

// Executar script
approvePendingTrialUsers();

